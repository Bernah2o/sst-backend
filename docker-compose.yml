version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: sst_postgres
    environment:
      POSTGRES_DB: sst_platform
      POSTGRES_USER: sst_user
      POSTGRES_PASSWORD: sst_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - sst_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sst_user -d sst_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: sst_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sst_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sst_migrate
    environment:
      - DATABASE_URL=postgresql://sst_user:sst_password@db:5432/sst_platform
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    command: python migrate.py upgrade
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sst_network
    restart: "no"  # Solo ejecutar una vez
    profiles:
      - migration

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sst_app
    environment:
      - DATABASE_URL=postgresql://sst_user:sst_password@db:5432/sst_platform
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      - SQL_ECHO=false
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./certificates:/app/certificates
      - ./static:/app/static
      - ./templates:/app/templates
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sst_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: sst_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - app
    networks:
      - sst_network
    restart: unless-stopped
    profiles:
      - production

  # Celery Worker for background tasks (Optional)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sst_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://sst_user:sst_password@db:5432/sst_platform
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=production
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./certificates:/app/certificates
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sst_network
    restart: unless-stopped
    profiles:
      - production

  # Celery Beat for scheduled tasks (Optional)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sst_scheduler
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://sst_user:sst_password@db:5432/sst_platform
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sst_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  sst_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16