version: "3.8"

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.5
    container_name: sst_traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@dh2o.com.co"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - sst_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.dh2o.com.co`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # PostgreSQL Database con Seguridad Mejorada
  db:
    image: postgres:17-alpine
    container_name: sst_postgres
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_statement=all
      -c log_connections=on
      -c log_disconnections=on
      -c log_checkpoints=on
      -c log_lock_waits=on
    environment:
      POSTGRES_DB: ${DB_NAME:-bd_sst}
      POSTGRES_USER: ${DB_USER:-sstuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./security/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./security/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./security/init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"  # Solo bind a localhost para mayor seguridad
    networks:
      sst_network:
        ipv4_address: 172.20.0.10  # IP fija para configuraciones de seguridad
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${DB_USER:-sstuser} -d ${DB_NAME:-bd_sst}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - "traefik.enable=false"  # No exponer PostgreSQL externamente

  # Servicio de Seguridad con Fail2ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: sst_fail2ban
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - TZ=America/Bogota
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=1d
    volumes:
      - postgres_logs:/var/log/postgresql:ro
      - ./security/fail2ban:/data/jail.d:ro
      - ./security/fail2ban-filters:/data/filter.d:ro
      - fail2ban_data:/data
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "fail2ban-client", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.1"
        reservations:
          memory: 64M
          cpus: "0.05"

  # Servicio de Monitoreo de Seguridad
  security_monitor:
    image: alpine:latest
    container_name: sst_security_monitor
    environment:
      - DB_HOST=172.20.0.10
      - DB_PORT=5432
      - ALERT_THRESHOLD=10
      - CHECK_INTERVAL=60
    volumes:
      - postgres_logs:/var/log/postgresql:ro
      - ./security/monitor-scripts:/scripts:ro
      - security_reports:/reports
    command: >
      sh -c "
        apk add --no-cache curl jq postgresql-client &&
        chmod +x /scripts/*.sh &&
        /scripts/monitor-security.sh --continuous
      "
    depends_on:
      - db
      - fail2ban
    networks:
      - sst_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "monitor-security.sh"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: "0.05"
        reservations:
          memory: 32M
          cpus: "0.02"
    labels:
      - "traefik.enable=false"

  # Redis removido - no se usa en la aplicaci√≥n actual

  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sst_migrate
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-sstuser}:${DB_PASSWORD}@172.20.0.10:5432/${DB_NAME:-bd_sst}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - DEBUG=false
    command: python migrate.py upgrade
    volumes:
      - app_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sst_network
    restart: "no"
    profiles:
      - migration

  # FastAPI Application - Instance 1
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sst_app1
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-sstuser}:${DB_PASSWORD}@172.20.0.10:5432/${DB_NAME:-bd_sst}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - DEBUG=false
      - USE_FIREBASE_STORAGE=${USE_FIREBASE_STORAGE:-true}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    expose:
      - "8000"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_certificates:/app/certificates
      - app_static:/app/static
      - app_medical_reports:/app/medical_reports
      - app_attendance_lists:/app/attendance_lists
    depends_on:
      db:
        condition: service_healthy
      traefik:
        condition: service_started
    networks:
      - sst_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api1.rule=Host(`api.dh2o.com.co`)"
      - "traefik.http.routers.api1.entrypoints=websecure"
      - "traefik.http.routers.api1.tls.certresolver=letsencrypt"
      - "traefik.http.services.api1.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE,PATCH"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.api-cors.headers.addvaryheader=true"
      - "traefik.http.routers.api1.middlewares=api-cors"

  # FastAPI Application - Instance 2
  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sst_app2
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-sstuser}:${DB_PASSWORD}@172.20.0.10:5432/${DB_NAME:-bd_sst}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - DEBUG=false
      - USE_FIREBASE_STORAGE=${USE_FIREBASE_STORAGE:-true}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    expose:
      - "8000"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_certificates:/app/certificates
      - app_static:/app/static
      - app_medical_reports:/app/medical_reports
      - app_attendance_lists:/app/attendance_lists
    depends_on:
      db:
        condition: service_healthy
      traefik:
        condition: service_started
    networks:
      - sst_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api2.rule=Host(`api.dh2o.com.co`) && PathPrefix(`/api/v2`)"
      - "traefik.http.routers.api2.entrypoints=websecure"
      - "traefik.http.routers.api2.tls.certresolver=letsencrypt"
      - "traefik.http.services.api2.loadbalancer.server.port=8000"
      - "traefik.http.routers.api2.middlewares=api-cors"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  postgres_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres_logs
  fail2ban_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/fail2ban
  security_reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/security_reports
  # redis_data removido - Redis no es necesario
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  app_certificates:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/certificates
  app_static:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/static
  app_medical_reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/medical_reports
  app_attendance_lists:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/attendance_lists
  traefik_letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/letsencrypt

networks:
  sst_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
