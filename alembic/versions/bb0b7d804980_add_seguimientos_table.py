"""add_seguimientos_table

Revision ID: bb0b7d804980
Revises: ec0717042d05
Create Date: 2025-08-13 14:11:33.034534

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bb0b7d804980'
down_revision = 'ec0717042d05'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_reinduction_config_id'), table_name='reinduction_config')
    op.drop_table('reinduction_config')
    op.drop_index(op.f('ix_reinduction_records_id'), table_name='reinduction_records')
    op.drop_table('reinduction_records')
    op.drop_index(op.f('ix_programas_id'), table_name='programas')
    op.drop_table('programas')
    op.drop_index(op.f('ix_admin_config_category'), table_name='admin_config')
    op.drop_index(op.f('ix_admin_config_id'), table_name='admin_config')
    op.drop_table('admin_config')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admin_config',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('emo_periodicity', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('admin_config_pkey'))
    )
    op.create_index(op.f('ix_admin_config_id'), 'admin_config', ['id'], unique=False)
    op.create_index(op.f('ix_admin_config_category'), 'admin_config', ['category'], unique=False)
    op.create_table('programas',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nombre_programa', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('activo', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('programas_pkey'))
    )
    op.create_index(op.f('ix_programas_id'), 'programas', ['id'], unique=False)
    op.create_table('reinduction_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('worker_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'OVERDUE', 'EXEMPTED', name='reinductionstatus'), autoincrement=False, nullable=False),
    sa.Column('assigned_course_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('enrollment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduled_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('completed_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('first_notification_sent', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reminder_notification_sent', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('overdue_notification_sent', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('exemption_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_course_id'], ['courses.id'], name=op.f('reinduction_records_assigned_course_id_fkey')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('reinduction_records_created_by_fkey')),
    sa.ForeignKeyConstraint(['enrollment_id'], ['enrollments.id'], name=op.f('reinduction_records_enrollment_id_fkey')),
    sa.ForeignKeyConstraint(['worker_id'], ['workers.id'], name=op.f('reinduction_records_worker_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('reinduction_records_pkey'))
    )
    op.create_index(op.f('ix_reinduction_records_id'), 'reinduction_records', ['id'], unique=False)
    op.create_table('reinduction_config',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_notification_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reminder_notification_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('grace_period_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('default_reinduction_course_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_enroll_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('auto_check_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('auto_notification_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['default_reinduction_course_id'], ['courses.id'], name=op.f('reinduction_config_default_reinduction_course_id_fkey')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('reinduction_config_updated_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('reinduction_config_pkey'))
    )
    op.create_index(op.f('ix_reinduction_config_id'), 'reinduction_config', ['id'], unique=False)
    # ### end Alembic commands ###